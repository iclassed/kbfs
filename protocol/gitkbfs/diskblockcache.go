// Auto-generated by avdl-compiler v1.3.9 (https://github.com/keybase/node-avdl-compiler)
//   Input file: gitkbfs-avdl/diskblockcache.avdl

package gitkbfs1

import (
	keybase1 "github.com/keybase/client/go/protocol/keybase1"
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type BlockCacheEntry []byte
type BlockMetadataEntry []byte
type BlockRes struct {
	BlockData     BlockCacheEntry    `codec:"blockData" json:"blockData"`
	BlockMetadata BlockMetadataEntry `codec:"blockMetadata" json:"blockMetadata"`
}

type DeletBlockRes struct {
	NumRemoved  int `codec:"numRemoved" json:"numRemoved"`
	SizeRemoved int `codec:"sizeRemoved" json:"sizeRemoved"`
}

type GetBlockArg struct {
	TlfID   string `codec:"tlfID" json:"tlfID"`
	BlockID string `codec:"blockID" json:"blockID"`
}

type PutBlockArg struct {
	TlfID   string          `codec:"tlfID" json:"tlfID"`
	BlockID string          `codec:"blockID" json:"blockID"`
	Buf     BlockCacheEntry `codec:"buf" json:"buf"`
}

type DeleteBlocksArg struct {
	BlockIDs []string `codec:"blockIDs" json:"blockIDs"`
}

// DiskBlockCacheInterface specifies remote disk block cache operations that the
// KBFS service provides for KBGit.
type DiskBlockCacheInterface interface {
	// getBlock returns an encoded block and its cache metadata.
	GetBlock(context.Context, GetBlockArg) (BlockRes, error)
	// putBlock accepts an encoded block and puts it into the disk cache.
	PutBlock(context.Context, PutBlockArg) error
	// deleteBlocks deletes a set of blocks from the disk cache.
	DeleteBlocks(context.Context, []string) (DeleteBlockRes, error)
}

func DiskBlockCacheProtocol(i DiskBlockCacheInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "gitkbfs.1.DiskBlockCache",
		Methods: map[string]rpc.ServeHandlerDescription{
			"getBlock": {
				MakeArg: func() interface{} {
					ret := make([]GetBlockArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]GetBlockArg)
					if !ok {
						err = rpc.NewTypeError((*[]GetBlockArg)(nil), args)
						return
					}
					ret, err = i.GetBlock(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"putBlock": {
				MakeArg: func() interface{} {
					ret := make([]PutBlockArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]PutBlockArg)
					if !ok {
						err = rpc.NewTypeError((*[]PutBlockArg)(nil), args)
						return
					}
					err = i.PutBlock(ctx, (*typedArgs)[0])
					return
				},
				MethodType: rpc.MethodCall,
			},
			"deleteBlocks": {
				MakeArg: func() interface{} {
					ret := make([]DeleteBlocksArg, 1)
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[]DeleteBlocksArg)
					if !ok {
						err = rpc.NewTypeError((*[]DeleteBlocksArg)(nil), args)
						return
					}
					ret, err = i.DeleteBlocks(ctx, (*typedArgs)[0].BlockIDs)
					return
				},
				MethodType: rpc.MethodCall,
			},
		},
	}
}

type DiskBlockCacheClient struct {
	Cli rpc.GenericClient
}

// getBlock returns an encoded block and its cache metadata.
func (c DiskBlockCacheClient) GetBlock(ctx context.Context, __arg GetBlockArg) (res BlockRes, err error) {
	err = c.Cli.Call(ctx, "gitkbfs.1.DiskBlockCache.getBlock", []interface{}{__arg}, &res)
	return
}

// putBlock accepts an encoded block and puts it into the disk cache.
func (c DiskBlockCacheClient) PutBlock(ctx context.Context, __arg PutBlockArg) (err error) {
	err = c.Cli.Call(ctx, "gitkbfs.1.DiskBlockCache.putBlock", []interface{}{__arg}, nil)
	return
}

// deleteBlocks deletes a set of blocks from the disk cache.
func (c DiskBlockCacheClient) DeleteBlocks(ctx context.Context, blockIDs []string) (res DeleteBlockRes, err error) {
	__arg := DeleteBlocksArg{BlockIDs: blockIDs}
	err = c.Cli.Call(ctx, "gitkbfs.1.DiskBlockCache.deleteBlocks", []interface{}{__arg}, &res)
	return
}
